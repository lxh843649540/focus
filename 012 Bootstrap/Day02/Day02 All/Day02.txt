1、视口
	<meta name="viewport" content="width=device-width,initial-scale=1,user-scalable=no">
2、编写响应式网页
	1、必须声明视口
	2、文字尽量使用相对尺寸 em,rem
	3、容器尽量使用相对尺寸 %
	4、图像尽量使用相对尺寸 %,auto
		width : 50%; 无限放大
		max-width : 50% ; 不能超过图像本身大小
	5、页面尽量使用流式布局
		float:left;
		display:inline-block;
	6、CSS3 Media Query
		语法
			@media MEDIA-TYPE and|not|only (MEDIA-FEATURE){
				样式规则;
			}

=============================================
1、Twritter Bootstrap
	官网：http://getbootstrap.com
	中文官网：http://www.bootcss.com

	Bootstrap :
	 1、CSS重写
	 2、定义一部分CSS样式
	 3、响应式的布局效果
	重点：bootstrap.css - 提供了上千个class
	行为(动作) 依赖于 JS库 - jQuery

	Bootstrap 分为5部分：
		1、起步 - 引入Bootstrap框架到网页中
		2、全局CSS样式 - 用于改变页面元素样式的class
		3、组件 - 使用复杂结构拼出特殊效果
		4、JS插件 - 定义页面元素的行为
		5、定制 - 自定义bootstrap中的内容
2、Bootstra第一步-起步
	1、<html lang="zh-cn">
		指定当前文档的基础语言
			zh-cn,zh-tw,jp,en
		作用：
			1、为浏览器自动翻译功能指定语言基础
			2、为读屏软件指定基础发音
	2、<meta name="viewport"> 必须
	3、<meta http-equiv="x-ua-compatible" content="IE=edge">
		1、x-ua-compatible
			全称：Cross UserAgent Compatible
				跨(IE)浏览器兼容性
			作用：指定用哪个IE的内核来进行页面的渲染
		2、IE=edge
			指定渲染页面的 IE 浏览器的内核
			IE=6 : 指定用IE6内核渲染页面
			IE=7 : 指定用IE7内核渲染页面
				6 / 7
				在 IE7 以及以上浏览器中 ，使用 IE7 内核
				在 IE6 继续使用 IE6 的内核进行渲染
			IE=8
			IE=9
			...
			...
			IE=edge : 采用浏览器中最高版本的内核进行内容的渲染
	4、引入 Bootstrap.css
		<link rel="stylesheet" href="css/bootstrap.css">
	5、两个JS
		1、html5shiv.min.js
			第三方JS，自调函数，用于让老IE(IE8及以下)支持HTML5新标记
			<script src="JS文件路径"></script>
		2、respond.min.js
			第三方JS，自调函数，用于让老IE(IE8及以下)支持 CSS3 媒体查询(Media Query) 技术 - 响应式必备
			<script src="JS文件路径"></script>
		通过头部引用Hack 判断当前浏览器是否为 IE8及以下
			<!--[if lt IE 9]>
				<script src=""></script>
			<![endif]-->
	6、两个JS - jQuery,Bootstrap
		1、尽量在 页面底部 </body> 的位置进行引用
		2、注意顺序
			1、先引入 jquery.js
			2、再引入 bootstrap.js
	7、引入 测试 JS文件
		用于检查页面结构是否按照 Bootstrap 的要求进行编写的
		1、引入 bootlint.js ，位置位于 Bootstra.js 之后
		2、编写代码
			... ...
3、Bootstrap第二部 - 全局CSS样式
	bootstrap.css 内容分为2部分
	1、CSS Reset
		*{box-sizing:border-box;}
	2、上千个 class
		bootstrap.css
			.container{ ... }
			.btn-default{ ... }
4、Bootstrap 默认将屏幕分成四大类
	1、大型屏幕 (lg) : w >= 1200px
		PC 机屏幕
	2、中型屏幕 (md) : 992px <= w <= 1199px
		PC 机屏幕
	3、小型屏幕 (sm) : 768px <= w <= 991px
		PAD 屏幕
	4、超小型屏幕 (xs) : w <= 767px
		PHONE 屏幕
5、Bootstrap提供的容器元素
	1、定宽容器
		在不同宽度大小的设备上，均提供了固定的宽度值
		类：.container
			lg : width:1170px
			md : width:970px
			sm : width:750px
			xs : width:100%
	2、变宽容器
		在任何设备中，宽度都是 100% 
		类：.container-fluid
6、Bootstrap 第二部 - 全局css样式-按钮
	所有的按钮都依赖于 .btn 类(基类)
	页面中允许设置为按钮样式的元素有
	1、button
	2、input (submit,reset,button)
	3、a 
	按钮样式：
		.btn
		.btn-default 白底深色字效果的按钮
		.btn-danger/success/warning/info/primary
	不同尺寸按钮
		.btn-lg/sm/xs
	块级按钮
		.btn-block
7、Bootstrap 第二部 - 全局css样式-列表
	.list-unstyled : 不带标识的列表
	.list-inline : 行内列表
	.dl-horizontal : 水平 定义列表 <dl>
8、Bootstrap 第二部 - 全局css样式-图片
	.img-rounded ?
	.img-circle ?
	.img-thumbnail ?
	.img-responsive ?
	(10分钟)
9、Bootstrap 第二部 - 全局css样式-表格
	所有的表格都依赖于 .table
	.table-bordered ：带边框的表格
	.table-striped : 隔行变色表格(tbody内容)
	.table-hover : 带鼠标悬停效果的
	.table-responsive 响应式表格(为表格父元素添加)
10、Bootstrap 第二部 - 全局css样式-文本
	1、文本颜色相关
		.text-danger/success/warning/info/primary
		.bg-danger/success/warning/info/primary
	2、文本大小写
		.text-uppercase : 全大写
		.text-lowercase : 全小写
		.text-capitalize : 每个单词首字符大写
	3、文本对齐方式
		.text-left : 文本左对齐
		.text-center : 文本居中对齐
		.text-right : 文本右对齐
		.text-justify : 文本两端对齐
11、Bootstrap 第二步-全局CSS样式 - 栅格布局系统(重点)
	1、网页中能够实现布局的技术
		1、div + css
			好处：效率高
			不足：灵活，不易控制
		2、table 布局
			好处：简单，容易控制
			不足：效率低
		
		效率高，简单容易控制 ...
		3、栅格布局系统
			好处：效率高，容易控制，实现响应式
			不足：none
			本质就是有div组成的table样式的响应式结构

	2、使用方法
		1、栅格布局系统的最外层，必须是bootstrap提供的两个容器类之一
			.container 或 .container-fluid
		2、允许在容器中放置若干 "行"
			.row : 表示一行
			<div class="container"> //容器
				<div class="row"></div> //行1
				<div class="row"></div> //行2
			</div>

			每行中最多等分为 12 列
		3、行(div.row)中放置列，但是每列需要指定宽度（当前列要占据几列的宽 1/12,2/12）
		4、列 根据适用的屏幕分成四种类型
			.col-xs-*
				.col-xs-1 : 在超小屏幕中，占一列的宽(8.33%)
				.col-xs-2 : 在超小屏幕中，占两列的宽(16.66%)
				... ...
				.col-xs-12 : 在超小屏幕中，占12列的宽(100%)
			.col-sm-*
				.col-sm-1 : 小小型屏幕中，占一列的宽(8.33%)
		5、列偏移数量
			每个列都可以指定 向右 偏移几列的位置
			.col-xs-offset-n : 在 xs屏幕下，当前列向右偏移 n 列的位置距离
			.col-sm-offset-n : 在 sm屏幕下，当前列向右偏移 n 列的位置距离
			.col-md-offset-n : 在 md屏幕下，当前列向右偏移 n 列的位置距离
			.col-lg-offset-n : 在 lg屏幕下，当前列向右偏移 n 列的位置距离


