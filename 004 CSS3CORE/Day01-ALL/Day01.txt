CSS3 Core(2天)
1、复杂选择器
2、内容生成
3、弹性布局
4、CSS Hack
==================================
1、复杂选择器
	1、兄弟选择器
		1、什么是兄弟选择
			通过 兄弟级别的位置关系来匹配页面元素
			<div id="d1">
				<span></span>
			</div>
			<div id="d2"></div>

			注意：兄弟选择器 只能向后找，不能向前找
		2、语法
			1、相邻兄弟选择器
				通过相邻(紧紧挨着)位置关系匹配元素
				<div id="d1"></div>
				<div id="d2"></div>
				<div id="d3"></div>
				语法：选择器1+选择器2
				ex:
					1、div+p
					2、#top+.important
			2、通用兄弟选择器
				用于匹配某元素后面所有的兄弟元素
				语法：选择器1~选择器2
				ex:
					1、#d1~div
						匹配 id为d1元素后面所有的div元素
	2、属性选择器
		1、什么是属性选择器
			通过元素所附带的属性及其值来匹配页面中的元素
			Q:想获取页面中所有的文本框 type="text"
		2、语法
			1、基础属性选择器
				语法：[attr]
				语义：匹配页面中所有 附带 attr 属性的元素
				ex:
					1、[id] :匹配页面中所有附带id属性的元素
			2、elem[attr]
				elem:表示任意元素名称
				attr:表示任意属性名称
				语义：匹配页面中附带attr属性的elem元素
				ex:
					1、div[id] : 匹配页面中所有附带id属性的div元素
					2、input[name] :
			3、[attr1][attr2]
				语义：匹配页面中同时附带 attr1 和 attr2属性的 所有元素
				ex:
					1、[id][class]
					2、input[name][value]
			4、[attr=value]
				语义：匹配页面中所有attr属性的值为value的元素
				ex:
					1、匹配页面中所有的文本框
						input[type=text]
						input[type='text']
						input[type="text"]
			5、[class~=value]
				主要使用在多类选择器上
				<div class="important redColor blueBack"></div>
				语义：匹配页面中class属性值列表中包含value选择器的元素
				ex:
					1、div[class~=redColor]
						匹配 class 属性值列表中包含redColor独立选择器的div元素
			6、[attr^=value]
				^= : 以 ... 作为开始
				语义：匹配以value值作为开始的attr属性的元素
					<div class="col-sm-5"></div>
					<div class="col-lg-6"></div>
				ex:
					1、匹配页面中class属性值是以col作为开始的div元素
						div[class ^= col]
			7、[attr$=value]
				$= : 以 ... 作为结束
				ex:
					1、[class$="ant"]
						匹配页面中class属性值是以 ant 作为结尾的元素
			8、[attr*=value]
				语义：匹配attr属性值中包含value字符的所有元素
				ex
					1、[class*=ac]
	3、伪类选择器
		1、目标伪类
			目的：突出显示活动的HTML锚元素
			语法：:target
		2、结构伪类
			通过元素之间的结构关系来匹配元素
			1、:first-child
				作用：获取 属于其 父元素中的 首个子元素
				ex:
					1、td:first-child
						获取 属于 每个tr中的第一个td
					2、#tbl td:first-child
						获取 id为tbl表格中 每个tr中的第一个td
			2、:last-child
				获取 属于其父元素中的 最后一个子元素
			3、:nth-child(n)
				获取 属于其父元素中的 第n个子元素

				1、td:nth-child(1)
					等同于 td:first-child
			4、:empty
				匹配没有子元素(包含文本)的元素
				1、<div><span></span></div>
					div : 非 empty
					span: 是 empty
				2、<div>这是一个div</div>
					div : 非 empty
				3、<div> </div>
					div : 非 empty
				4、<div></div>
					div : empty
				5、:only-child
					匹配 属于其 父元素中的唯一子元素
					<div>
						<p>Hello P1</p>
					</div>
					p:only-child{/*能匹配上*/}

					<div>
						<span>s1</span>
						<p>p1</p> 非 唯一 
					</div>
		3、否定伪类
			将匹配 某选择器的元素 排除出去
			语法：:not(选择器)
			ex：
				1、匹配 除第一行以外的所有行
		练习：
			除每行第一列以外剩下的列，文字大小全部改为 18pt
	4、伪元素选择器
		1、伪类 & 伪元素
			伪类 ：匹配元素不同的状态
			伪元素：匹配的是元素中的内容
		2、语法
			1、:first-letter 或 ::first-letter
				作用：匹配某元素的首字符
			2、:first-line 或 ::first-line
				作用：匹配某元素的首行字符
			3、::selection
				作用：匹配用户选取的内容部分

		3、: VS ::
			1、在CSS2.1中 ，伪类选择器 和 伪元素选择器都是用 : 来表示
				:hover,:active,:first-line,:first-letter
			
			2、在CSS3中，所有的伪类选择器用 : 表示
				所有的伪元素选择器用 :: 表示
2、内容生成
	1、什么是内容生成
		通过css动态的向某个元素的内容区域之前/之后增加一部分内容
	2、伪元素选择器
		1、:before 或 ::before
			定位到元素的内容区域之前
			<div>(:before)这是一个div</div>
		2、:after 或 ::after
			定位到元素的内容区域之后
			<div>这是一个div(:after)</div>
	3、语法
		属性：content
		取值：
			1、普通文本
			2、图像,url(图像地址)
			3、计数器
	4、解决的两个问题
		1、外边距溢出问题
			1、为父元素添加边框
			2、使用父元素的内边距，取代子元素的外边距
			3、在父元素的第一个或最后一个子元素位置处，增加一个空table
		2、浮动元素父元素的高度问题
3、弹性布局
	1、什么是弹性布局
		弹性布局,Flexible Box，可伸缩布局
		为普通布局带来更大的灵活性
	2、基本概念
		1、Flex容器 ：简称容器，将元素设置为Flex容器后，其子元素允许实现灵活的位置摆放
		2、Flex项目 ：简称项目，存放在Flex容器中的内容
	3、语法
		1、容器
			属性：display
			取值：
				1、flex
					将 块级元素 变为flex容器
				2、inline-flex
					将 行内元素 变为flex容器
			注意：将元素设置为flex布局之后，子元素的float,clear,vertical-align属性将失去作用
		2、容器的属性
			该组属性要添加在容器元素上，控制子元素的位置.
			1、flex-direction
				作用：决定主轴(main-axsis)的方向
				取值：
					1、row
						主轴为水平方向的轴，起点在容器左端，默认值
					2、row-reverse
						主轴为水平方向的轴，起点在容器右端
					3、column
						主轴为交叉轴，起点在容器的顶端
					4、column-reverse
						主轴为交叉轴，起点在容器的底端
			2、flex-wrap
				作用：当一条轴线(一行)排列不下时，子元素将如何换行
				取值：
					1、nowrap
						默认值，不换行
					2、wrap
						换行
					3、wrap-reverse
			3、flex-flow
				作用：direction 和 wrap 的缩写方式
				取值：
					1、默认值
						row nowrap
					2、direction wrap
				ex:
					flex-flow:column wrap-reverse;
			4、justify-content
				作用：定义项目在主轴上的对齐方式
				取值：
					1、flex-start
						主轴起点对齐
					2、flex-end
						主轴终点对齐
					3、center
						居中对齐
					4、space-between
						两端对齐，项目之间的距离是相等的
					5、space-around
						每个项目两侧间距是相等的
						注意：
							项目与项目之间的间隔，要比项目与父元素之间的间隔大一倍
			5、align-items
				作用：定义项目在交叉轴的对齐方式(单行项目有效)
				取值：
					1、flex-start
						在交叉轴的起点对齐
					2、flex-end
						在交叉轴的终点对齐
					3、center
						在交叉中的中间对齐
					4、baseline
						基线对齐,以所有项目中的第一行文本为准
					5、stretch
						默认值，如果项目不设置高度或高度为auto时，那么项目将沾满整个容器的高度
			6、align-content
				作用：定义了多跟轴线的对齐方式，如果项目只有一根轴线，该属性无效
				取值：
					1、flex-start
						交叉轴顶端对齐
					2、flex-end
					3、center
					4、space-between
						与交叉轴两端对齐
					5、space-around
					6、stretch
		3、项目的属性
			该组属性主要设置于项目中
			1、order
				作用：定义项目的排列顺序，值越小，越靠前,默认为0
			2、flex-grow
				作用：指定项目的放大比例，默认为0，即不放大
				取值：数字
			3、flex-shrink
				作用：指定项目的缩小比例，默认为1，即空间不足时，等比缩小
				取值：数字
				注意：取值为0，即不缩小
			4、flex-basis
				作用：指定项目占据主轴的剩余空间大小
				取值：
					1、auto
						默认值，项目本身大小
					2、数值
			5、flex
				作用：是 flex-grow，flex-shrink，flex-basis的简写模式
				取值：
					1、auto
						相当于 1 1 auto
					2、none
						相当于 0 0 auto
					3、flex-grow[,flex-shrink,flex-basis]
			6、align-self
				作用：允许定义当个项目与其他项目不一样的交叉轴对齐方式(类似于align-items)，能够覆盖 align-items的效果
				取值：
					1、auto
						默认值，使用 align-items的值
					2、flex-start
					3、flex-end
					4、center
					5、baseline
					6、stretch
4、CSS Hack
	1、标准模式 和 混杂模式 和 准标准模式
		IE6 之前 ，无兼容性可言
		IE6 之后 ，各个浏览器追求标准统一，开始支持标准。IE的其他浏览器要向前兼容，所以出现各种模式

		1、混杂模式
			无标准可言
			编写代码时，不写<!doctype>就是混杂模式，采用的是IE5.5的内核进行渲染
		2、标准模式
			完全支持标准
		3、准标准模式
			即支持标准代码，也同时向前兼容非标准代码


